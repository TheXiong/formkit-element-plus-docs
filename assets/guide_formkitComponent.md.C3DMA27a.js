import{_ as o,c as r,a as e,b as a,o as n}from"./chunks/framework.CLtZAfjj.js";const u=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"guide/formkitComponent.md","filePath":"guide/formkitComponent.md","lastUpdated":1731056668000}'),i={name:"guide/formkitComponent.md"};function l(m,t,d,s,p,c){return n(),r("div",null,t[0]||(t[0]=[e("h1",{id:"介绍",tabindex:"-1"},[a("介绍 "),e("a",{class:"header-anchor",href:"#介绍","aria-label":'Permalink to "介绍"'},"​")],-1),e("p",null,"FormKit 框架的核心是 @formkit/core。这个零依赖的包负责 FormKit 几乎所有的底层关键功能，例如：",-1),e("p",null,"配置 值输入/输出 事件冒泡 插件管理 树状态跟踪 消息管理 生命周期钩子",-1),e("h1",{id:"架构",tabindex:"-1"},[a("架构 "),e("a",{class:"header-anchor",href:"#架构","aria-label":'Permalink to "架构"'},"​")],-1),e("p",null,"FormKit 核心的功能不是通过一个集中的实例暴露给你的应用程序，而是通过一组分布式的“节点”（FormKitNode），其中每个节点代表一个单独的输入。",-1),e("p",null,"每个输入组件“拥有”一个 FormKit 核心节点，每个节点包含自己的选项、配置、属性、事件、插件、生命周期钩子等。这种架构确保了 FormKit 的主要功能与渲染框架（Vue）解耦 — 这是减少副作用和保持极快性能的关键。",-1)]))}const h=o(i,[["render",l]]);export{u as __pageData,h as default};
